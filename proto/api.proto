syntax = "proto3";

package api;

option go_package = "proto/api";

message RecentKifuRequest {
  int32 limit = 1;
}

message RecentKifuResponse {
  message Kifu {
    string user_id = 1;
    string kifu_id = 2;
    int64 start_ts = 3;

    string handicap = 4;
    string game_name = 5;
    string first_player = 6;
    string second_player = 7;
    string note = 8;
  }
  repeated Kifu kifus = 1;
}

message PostKifuRequest {
  // required.
  string payload = 1;

  // valid values: KIF
  // required.
  string format = 2;

  // valid values: UTF-8 | Shift_JIS
  // required.
  string encoding = 3;
}

message PostKifuResponse {
  string kifu_id = 1;
  message Kifu {
    string user_id = 1;
    string kifu_id = 2;
  }
  repeated Kifu duplicated = 2;
}

message DeleteKifuRequest {
  string kifu_id = 1;
}

message DeleteKifuResponse {
}

message GetKifuRequest {
  string kifu_id = 1;
}

message Pos {
  int32 x = 1;
  int32 y = 2;
}

message Piece {
  enum Id {
    NULL = 0;
    GYOKU = 1;
    HISHA = 2;
    RYU = 3;
    KAKU = 4;
    UMA = 5;
    KIN = 6;
    GIN = 7;
    NARI_GIN = 8;
    KEI = 9;
    NARI_KEI = 10;
    KYOU = 11;
    NARI_KYOU = 12;
    FU = 13;
    TO = 14;
  }
}

message FinishedStatus {
  enum Id {
    NOT_FINISHED = 0;
    SUSPEND = 1;
    SURRENDER = 2;
    DRAW = 3;
    REPETITION_DRAW = 4;
    CHECKMATE = 5;
    OVER_TIME_LIMIT = 6;
    FOUL_LOSS = 7;
    FOUL_WIN = 8;
    NYUGYOKU_WIN = 9;
  }
}

message Value {
  string name = 1;
  string value = 2;
}

message GetKifuResponse {
  string user_id = 1;
  string kifu_id = 2;

  int64 start_ts = 3;
  int64 end_ts = 4;
  string handicap = 5;
  string game_name = 6;
  message Player {
    string name = 1;
    string note = 2;
  }
  repeated Player first_players = 7;
  repeated Player second_players = 8;
  repeated Value other_fields = 9;
  string sfen = 10;
  int64 created_ts = 11;
  message Step {
    int32 seq = 1;
    string position = 2;
    Pos src = 3;
    Pos dst = 4;
    Piece.Id piece = 5;
    FinishedStatus.Id finished_status = 6;
    bool promoted = 7;
    Piece.Id captured = 8;
    int32 timestamp_sec = 9;
    int32 thinking_sec = 10;
    repeated string notes = 11;
  }
  repeated Step steps = 12;
  string note = 13;
}

message GetSamePositionsRequest {
  string position = 1;
  int32 steps = 2;
  repeated string exclude_kifu_ids = 3;
}

message GetSamePositionsResponse {
  string position = 1;

  message Step {
    int32 seq = 1;
    Pos src = 2;
    Pos dst = 3;
    Piece.Id piece = 4;
    bool promoted = 5;
    FinishedStatus.Id finished_status = 6;
  }
  message Kifu {
    string user_id = 1;
    string kifu_id = 2;
    int32 seq = 3;

    repeated Step steps = 4;
  }
  repeated Kifu kifus = 2;
}

message KifuRequest {
  oneof kifu_request_select {
    RecentKifuRequest request_recent_kifu = 1;
    PostKifuRequest request_post_kifu = 2;
    DeleteKifuRequest request_delete_kifu = 3;
    GetKifuRequest request_get_kifu = 4;
    GetSamePositionsRequest request_get_same_positions = 5;
  }
}


message KifuResponse {
  oneof kifu_response_select {
    RecentKifuResponse response_recent_kifu = 1;
    PostKifuResponse response_post_kifu = 2;
    DeleteKifuResponse response_delete_kifu = 3;
    GetKifuResponse response_get_kifu = 4;
    GetSamePositionsResponse response_get_same_positions = 5;
  }
}
