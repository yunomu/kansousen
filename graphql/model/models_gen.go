// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Kifu struct {
	KifuID      string        `json:"kifuId"`
	UserID      *string       `json:"userId"`
	Timestamp   *float64      `json:"timestamp"`
	CreatedTs   *float64      `json:"createdTs"`
	StartTs     *float64      `json:"startTs"`
	EndTs       *float64      `json:"endTs"`
	Handicap    *Handicap     `json:"handicap"`
	Note        *string       `json:"note"`
	OtherFields []*OtherField `json:"otherFields"`
	Players     []*Player     `json:"players"`
	Sfen        *string       `json:"sfen"`
	Steps       []*Step       `json:"steps"`
}

type OtherField struct {
	Name  string  `json:"name"`
	Value *string `json:"value"`
}

type Player struct {
	Name  string  `json:"name"`
	Order Order   `json:"order"`
	Note  *string `json:"note"`
}

type Step struct {
	Seq      int             `json:"seq"`
	Move     *string         `json:"move"`
	Piece    *Piece          `json:"piece"`
	Position *string         `json:"position"`
	Finished *FinishedStatus `json:"finished"`
	TimeSec  *int            `json:"timeSec"`
	ThinkSec *int            `json:"thinkSec"`
	Notes    []*StepNote     `json:"notes"`
}

type StepNote struct {
	ID   int     `json:"id"`
	Text *string `json:"text"`
}

type FinishedStatus string

const (
	FinishedStatusNotFinished    FinishedStatus = "NOT_FINISHED"
	FinishedStatusSuspend        FinishedStatus = "SUSPEND"
	FinishedStatusSurrender      FinishedStatus = "SURRENDER"
	FinishedStatusDraw           FinishedStatus = "DRAW"
	FinishedStatusRepetitionDraw FinishedStatus = "REPETITION_DRAW"
	FinishedStatusCheckmate      FinishedStatus = "CHECKMATE"
	FinishedStatusOverTimeLimit  FinishedStatus = "OVER_TIME_LIMIT"
	FinishedStatusFoulLoss       FinishedStatus = "FOUL_LOSS"
	FinishedStatusFoulWin        FinishedStatus = "FOUL_WIN"
	FinishedStatusNyugyokuWin    FinishedStatus = "NYUGYOKU_WIN"
)

var AllFinishedStatus = []FinishedStatus{
	FinishedStatusNotFinished,
	FinishedStatusSuspend,
	FinishedStatusSurrender,
	FinishedStatusDraw,
	FinishedStatusRepetitionDraw,
	FinishedStatusCheckmate,
	FinishedStatusOverTimeLimit,
	FinishedStatusFoulLoss,
	FinishedStatusFoulWin,
	FinishedStatusNyugyokuWin,
}

func (e FinishedStatus) IsValid() bool {
	switch e {
	case FinishedStatusNotFinished, FinishedStatusSuspend, FinishedStatusSurrender, FinishedStatusDraw, FinishedStatusRepetitionDraw, FinishedStatusCheckmate, FinishedStatusOverTimeLimit, FinishedStatusFoulLoss, FinishedStatusFoulWin, FinishedStatusNyugyokuWin:
		return true
	}
	return false
}

func (e FinishedStatus) String() string {
	return string(e)
}

func (e *FinishedStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FinishedStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FinishedStatus", str)
	}
	return nil
}

func (e FinishedStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Handicap string

const (
	HandicapNone      Handicap = "NONE"
	HandicapDropL     Handicap = "DROP_L"
	HandicapDropLR    Handicap = "DROP_L_R"
	HandicapDropB     Handicap = "DROP_B"
	HandicapDropRl    Handicap = "DROP_RL"
	HandicapDropTwo   Handicap = "DROP_TWO"
	HandicapDropThree Handicap = "DROP_THREE"
	HandicapDropFour  Handicap = "DROP_FOUR"
	HandicapDropFive  Handicap = "DROP_FIVE"
	HandicapDropFiveL Handicap = "DROP_FIVE_L"
	HandicapDropSix   Handicap = "DROP_SIX"
	HandicapDropEight Handicap = "DROP_EIGHT"
	HandicapDropTen   Handicap = "DROP_TEN"
	HandicapOther     Handicap = "OTHER"
)

var AllHandicap = []Handicap{
	HandicapNone,
	HandicapDropL,
	HandicapDropLR,
	HandicapDropB,
	HandicapDropRl,
	HandicapDropTwo,
	HandicapDropThree,
	HandicapDropFour,
	HandicapDropFive,
	HandicapDropFiveL,
	HandicapDropSix,
	HandicapDropEight,
	HandicapDropTen,
	HandicapOther,
}

func (e Handicap) IsValid() bool {
	switch e {
	case HandicapNone, HandicapDropL, HandicapDropLR, HandicapDropB, HandicapDropRl, HandicapDropTwo, HandicapDropThree, HandicapDropFour, HandicapDropFive, HandicapDropFiveL, HandicapDropSix, HandicapDropEight, HandicapDropTen, HandicapOther:
		return true
	}
	return false
}

func (e Handicap) String() string {
	return string(e)
}

func (e *Handicap) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Handicap(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Handicap", str)
	}
	return nil
}

func (e Handicap) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Order string

const (
	OrderBlack Order = "BLACK"
	OrderWhite Order = "WHITE"
)

var AllOrder = []Order{
	OrderBlack,
	OrderWhite,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderBlack, OrderWhite:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Piece string

const (
	PieceNull     Piece = "NULL"
	PieceGyoku    Piece = "GYOKU"
	PieceHisha    Piece = "HISHA"
	PieceRyu      Piece = "RYU"
	PieceKaku     Piece = "KAKU"
	PieceUma      Piece = "UMA"
	PieceKin      Piece = "KIN"
	PieceGin      Piece = "GIN"
	PieceNariGin  Piece = "NARI_GIN"
	PieceKei      Piece = "KEI"
	PieceNariKei  Piece = "NARI_KEI"
	PieceKyou     Piece = "KYOU"
	PieceNariKyou Piece = "NARI_KYOU"
	PieceFu       Piece = "FU"
	PieceTo       Piece = "TO"
)

var AllPiece = []Piece{
	PieceNull,
	PieceGyoku,
	PieceHisha,
	PieceRyu,
	PieceKaku,
	PieceUma,
	PieceKin,
	PieceGin,
	PieceNariGin,
	PieceKei,
	PieceNariKei,
	PieceKyou,
	PieceNariKyou,
	PieceFu,
	PieceTo,
}

func (e Piece) IsValid() bool {
	switch e {
	case PieceNull, PieceGyoku, PieceHisha, PieceRyu, PieceKaku, PieceUma, PieceKin, PieceGin, PieceNariGin, PieceKei, PieceNariKei, PieceKyou, PieceNariKyou, PieceFu, PieceTo:
		return true
	}
	return false
}

func (e Piece) String() string {
	return string(e)
}

func (e *Piece) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Piece(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Piece", str)
	}
	return nil
}

func (e Piece) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
