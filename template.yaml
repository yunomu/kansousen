AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  kansousen
  
  SAM Template for kansousen

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  Stage:
    Type: String
    Default: Prod
  ApiDomainName:
    Type: String
    Default: kansousenapi.wagahai.info
  SiteDomainName:
    Type: String
    Default: kansousen.wagahai.info
  AuthDomainName:
    Type: String
    Default: kansousenauth.wagahai.info
  Certificate:
    Type: String
    Default: "arn:aws:acm:us-east-1:970194315034:certificate/22878dcd-b96c-4529-bc08-eddaa1d90324"
  CloudfrontManagedCachePolicy:
    Type: String
    Default: "658327ea-f89d-4fab-a63d-7e88639e58f6"

Resources:
  KansousenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: InversedVersion
          AttributeType: N
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: InversedVersionIndex
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: InversedVersion
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
  KansousenTablePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt KansousenTable.Arn
              - !Sub
                - "${TableARN}/index/*"
                - { TableARN: !GetAtt KansousenTable.Arn }
  KifuFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/kifu
      Handler: kifu
      Runtime: go1.x
      Policies: !Ref KansousenTablePolicy
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TABLE_NAME: !Ref KansousenTable
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: False
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
          TemporaryPasswordValidityDays: 7
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      CallbackURLs:
        - !Sub "https://${SiteDomainName}/callback"
        - http://localhost:8080/callback
      LogoutURLs:
        - !Sub "https://${SiteDomainName}/"
        - http://localhost:8080/
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        IdToken: "hours"
        AccessToken: "hours"
        RefreshToken: "days"
      IdTokenValidity: 1
      AccessTokenValidity: 1
      RefreshTokenValidity: 30
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Ref AuthDomainName
      CustomDomainConfig:
        CertificateArn: !Ref Certificate
  KifuApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'POST'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
  ApiGatewayResponse4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref KifuApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  ApiGatewayResponse401:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref KifuApi
      ResponseType: UNAUTHORIZED
      StatusCode: 401
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  ApiGatewayResponse5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref KifuApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  KifuApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/kifu
      Handler: kifu
      Runtime: go1.x
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt KifuFunction.Arn
      Environment:
        Variables:
          KIFU_FUNC_ARN: !GetAtt KifuFunction.Arn
          REGION: !Ref AWS::Region
      Events:
        KifuApiEvent:
          Type: Api
          Properties:
            Path: /v1/kifu
            Method: POST
            RestApiId: !Ref KifuApi
  HealthApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/ok
      Handler: ok
      Runtime: go1.x
      Policies: !Ref KansousenTablePolicy
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TABLE_NAME: !Ref KansousenTable
      Events:
        HealthApiEvent:
          Type: Api
          Properties:
            Path: /v1/ok
            Method: GET
            RestApiId: !Ref KifuApi
            Auth:
              Authorizer: NONE
  ApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref ApiDomainName
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref Certificate
          SecurityPolicy: TLS_1_2
  ApiDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - KifuApiStage
    Properties:
      ApiId: !Ref KifuApi
      DomainName: !Ref ApiDomainName
      Stage: !Ref Stage
  StaticBucket:
    Type: AWS::S3::Bucket
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${StaticBucket}/*"
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${StaticBucket}"
  StaticCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref SiteDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt StaticBucket.DomainName
            Id: !Sub "S3-${StaticBucket}"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          CachePolicyId: !Ref CloudfrontManagedCachePolicy
          TargetOriginId: !Sub "S3-${StaticBucket}"
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - GET
            - HEAD
        HttpVersion: http2
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region
  StackName:
    Description: "StackName"
    Value: !Ref AWS::StackName
  KifuTable:
    Description: "Table name for Kifu"
    Value: !Ref KansousenTable
  KifuFunction:
    Description: "KifuFunction Arn"
    Value: !GetAtt KifuFunction.Arn
  UserPoolClientID:
    Description: "User Pool Client ID"
    Value: !Ref CognitoUserPoolClient
  RestApiID:
    Description: "REST API ID"
    Value: !Ref KifuApi
  Endpoint:
    Description: "API Endpoint"
    Value: !Sub "https://${ApiDomain}/"
  RegionalDomainName:
    Description: "Set CNAME record"
    Value: !GetAtt ApiDomain.RegionalDomainName
  StaticBucket:
    Description: "S3 Bucket for static resources"
    Value: !Ref StaticBucket
  Host:
    Description: "Host URL"
    Value: !Sub "https://${SiteDomainName}/"
  IDP:
    Description: "IDP URL"
    Value: !Sub "https://${AuthDomainName}/"
